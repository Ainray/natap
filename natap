#!/bin/bash
# author: ainray
# email: wwzhang0421@163.com
#
VERSION="1-0"
PROGNAME=$(basename $0)

eth1=enp59s0 
eth0=enx000ec6fb151b
wlan0=wlp60s0
wlan0_ap=${wlan0}_ap 
wlan0_sta=${wlan0}_sta
wlan0_ip=192.20.39.1
wlan0_mask=255.255.255.0
wlan0_ssid="ainray"
wlan0_psk="235111235"
eth0_ip="192.20.16.1"
eth0_ip_range="192.20.16.1/24"
eth1_ip="172.20.16.39"
eth1_mask="255.255.255.0"
#comma separated list
dns_server_ip="211.167.230.100,211.167.230.200,8.8.8.8,8.8.4.4"

typeset -u PROGNAMEU
PROGNAMEU=${PROGNAME}
PREFIX=$(pwd)
PROGDIR="${PROGNAME}_${VERSION}"
IPTABLES=/sbin/iptables

usage(){
    echo "SYNOPSIS:"
    echo "  sudo ${PROGNAME} nat start|restart|masq"
    echo "  sudo ${PROGNAME} nat start|restart|masq ${eth1} ${eth0}"
    echo "  sudo ${PROGNAME} nat start|restart|masq ${eth1} ${wlan_ap}"
    echo "  sudo ${PROGNAME} nat start|restart|masq ${eth1} ${eth0} ${wlan_ap}"
    echo "  sudo ${PROGNAME} nat start|restart|masq ${eth1} ${eth0} ${wlan_ap}"
    echo "  sudo ${PROGNAME} nat start|restart|masq ${wlan0_sta} ${wlan_ap}"
    echo "  sudo ${PROGNAME} nat start|restart|masq ${wlan0_sta} ${eth0}"
    echo "  sudo ${PROGNAME} nat start|restart|masq ${wlan0_sta} ${wlan0_ap} ${eth0}"
    echo "  sudo ${PROGNAME} nat stop"
    echo "  sudo ${PROGNAME} nat status"
    echo "  sudo ${PROGNAME} nat flush"
    echo "  sudo ${PROGNAME} ap start ${wlan0}"
    echo "  sudo ${PROGNAME} ap stop ${wlan0}"
    echo "  sudo ${PROGNAME} ap create ${wlan0}"
    echo "  sudo ${PROGNAME} ap delete ${wlan0}"
    echo "  sudo ${PROGNAME} reset"
    echo ""
    echo  "  This command must be run with root privilege. It can:"
    echo  "         + Create a wireless access point(AP)"
    echo  "         + Share Internet with local LAN by using MASQUERADE, i.e., Linux is a gateway"
    echo  ""
    echo  "  Dependencies:"
    echo  "         + hostapd, create access point"
    echo  "         + isc-dhcp-server, assign ip for associcated clients"
    echo  "         + network tools, e.g. ifup/ifdown/ip/iw/ifconfig/iwconfig"
    echo  ""
    echo  "    Important configuration files: "
    echo  "         + /etc/hostapd.conf"
    echo  "         + /etc/dhcp/dhcpd.conf"
    echo  "         + /etc/default/isc-dhcp-server"
    echo  "         + /etc/network/interfaces"
    echo  "         + /usr/share/bash-completion/completions/${PROGNAME}***"
    echo
    echo  "     You should modify configuration files to get it worked for you. This is just a guide."
    echo 
    echo    "    My setting on Debian gateway have three sets of rules:"
    echo
    echo    "       * Disallow incoming connections to eth1 (the external network interface)"
    echo    "       * Allow outgoing packets from the LAN (via eth0 and wlan0)"
    echo    "       * Allow established connections to return."
    echo    ""
    echo    " Example configuration:"
    echo    ""
    echo    ""
    echo "/etc/network/interfaces files"
    echo ""
    echo "# and how to activate them. For more information, see interfaces(5)."
    echo ""
    echo "source /etc/network/interfaces.d/*"
    echo ""
    echo "# The loopback network interface"
    echo "auto lo"
    echo "iface lo inet loopback"
    echo ""
    echo "# The primary network interface"
    echo "auto ${eth1}"
    echo "allow-hotplug ${eth1}"
    echo "iface ${eth1} inet static"
    echo "    address ${eth1_ip}"
    echo "    netmask ${eth1_mask}"
    echo "    gateway ${eth1_ip%.*}.1"
    echo -e "    dns-nameservers ${dns_server_ip//,/\\n    dns-nameservers }"
    echo "# usb-lan"
    echo "auto ${eth0}"
    echo "allow-hotplug ${eth0}"
    echo "iface ${eth0} inet static"
    echo "    address ${eth0_ip} "
    echo ""
    echo "# wlan"
    echo "# client"
    echo "allow_hotplug ${wlan0_sta}"
    echo "iface ${wlan0_sta} inet dhcp"
    echo "# manual not static"
    echo "iface ${wlan0_ap} inet manual"
    echo "    #hostapd must be started after the interface is brought-up"
    echo "    post-up /usr/sbin/hostapd -B /etc/${con_file_hostapd##*/}"
    echo "    up ip addr add ${wlan0_ip_range} broadcast ${wlan0_ip%.*}.1 dev ${wlan0_ap}"
    echo "    up service isc-dhcp-server restart"
    echo "    pre-down killall hostapd"
    echo "    down ip addr flush dev ${wlan0_ap}"
    echo ""
    echo ""
    echo "/etc/hostapd.conf"
    echo ""
    echo "# ${PROGNAME}_${VERSION}"
    echo "# Debug"
    echo "# Minimal configuration for test"
    echo "interface=${wlan0_ap}"
    echo "driver=nl80211"
    echo "ssid=${wlan0_ssid}"
    echo "#check by sudo iwlist wlp60s0 channel, more refer to iwlist"
    echo "channel=1"
    echo ""
    echo "# add more"
    echo "#simply means 2.4GHz band, a means 5G"
    echo "hw_mode=g"
    echo "wme_enabled=1"
    echo "# 802.11n support"
    echo "ieee80211n=1"
    echo "# check it by iw list"
    echo "ht_capab=[HT40+][SHORT-GI-40][DSSS_CKK-40]"
    echo ""
    echo "# authentication and Encryption"
    echo "# 1 for wpa, 2 for wep, 3 both"
    echo "auth_algs=1"
    echo "ignore_broadcast_ssid=0"
    echo "# WPA 2"
    echo "wpa=2"
    echo "wpa_passphrase=${wlan0_psk}"
    echo "wpa_key_mgmt=WPA-PSK"
    echo "# wpa_pairwise for WPA, rsn_pairwise for WPA2"
    echo "wpa_pairwise=TKIP"
    echo "rsn_pairwise=CCMP"
    echo ""
    echo "# more"
    echo "# limit frequencies used to those allowed in the country"
    echo "ieee80211d=1"
    echo "# china, check by isoqurey"
    echo "country_code=CN"
    echo "# QoS support"
    echo "wmm_enabled=1"
    echo ""
    echo ""
    echo "/etc/dhcp/dhcpd.conf"
    echo '# dhcpd.conf'
    echo '#'
    echo '# Sample configuration file for ISC dhcpd'
    echo '#'
    echo ''
    echo '# option definitions common to all supported networks...'
    echo "option domain-name-servers ${dns_server_ip};"
    echo ''
    echo 'default-lease-time 600;'
    echo 'max-lease-time 7200;'
    echo ''
    echo '# The ddns-updates-style parameter controls whether or not the server will'
    echo '# attempt to do a DNS update when a lease is confirmed. We default to the'
    echo "# behavior of the version 2 packages ('none', since DHCP v2 didn't"
    echo '# have support for DDNS.)'
    echo 'ddns-update-style none;'
    echo ''
    echo '# If this DHCP server is the official DHCP server for the local'
    echo '# network, the authoritative directive should be uncommented.'
    echo 'authoritative;'
    echo "subnet ${wlan0_ip%.*}.0 netmask ${wlan0_mask} {"
    echo "  range ${wlan0_ip%.*}.101 ${wlan0_ip%.*}.254;"
    echo "  option subnet-mask ${wlan0_mask};"
    echo "  option broadcast-address ${wlan0_ip%.*}.255;"
    echo "  option routers ${wlan0_ip};"
    echo '}'
    echo ""
    echo ""
    echo "/etc/default/isc-dhcp-server"
    echo ""
    echo "# Defaults for isc-dhcp-server (sourced by /etc/init.d/isc-dhcp-server)"
    echo ""
    echo "# Path to dhcpd's config file (default: /etc/dhcp/dhcpd.conf)."
    echo "#DHCPDv4_CONF=/etc/dhcp/dhcpd.conf"
    echo "#DHCPDv6_CONF=/etc/dhcp/dhcpd6.conf"
    echo ""
    echo "# Path to dhcpd's PID file (default: /var/run/dhcpd.pid)."
    echo "#DHCPDv4_PID=/var/run/dhcpd.pid"
    echo "#DHCPDv6_PID=/var/run/dhcpd6.pid"
    echo ""
    echo "# Additional options to start dhcpd with."
    echo "#	Don't use options -cf or -pf here; use DHCPD_CONF/ DHCPD_PID instead"
    echo '#OPTIONS=""'
    echo ""
    echo "# On what interfaces should the DHCP server (dhcpd) serve DHCP requests?"
    echo '#	Separate multiple interfaces with spaces, e.g. "eth0 eth1".'
    echo "#INTERFACESv4=\"\""
    echo "#interfaces=\"${wlan0}\""
    echo "INTERFACESv4=\"${wlan0_ap}\""
    echo "#INTERFACESv6="""
    echo ""
    echo ""
    echo "/usr/share/bash-completion/completions/${PROGNAME}"
    echo '#!/bin/bash'
    echo "_${PROGNAME}(){"
    echo '    local cur prev opts'
    echo '    local interfaces=$(ls /sys/class/net)'
    echo '    COMPREPLY=()'
    echo '    cur=${COMP_WORDS[COMP_CWORD]}'
    echo '    prev=${COMP_WORDS[$((COMP_CWORD-1))]}'
    echo '    case "$prev" in'
    echo "        \"${PROGNAME}\")"
    echo '            opts="ap inet nat reset status"'
    echo '            ;;'
    echo '        "nat")'
    echo '            opts="restart start stop flush masq"'
    echo '            ;;'
    echo '        "restart"|"start"|"masq"|"stop")'
    echo '            opts=${interfaces}'
    echo '            ;;'
    echo '        ap)'
    echo '            opts="create delete start stop"'
    echo '            ;;'
    echo '        inet)'
    echo '            opts="start stop"'
    echo '            ;;'
    echo '        create|delete)'
    echo "            opts=\"${wlan0}\""
    echo '            ;;'
    echo '        ${interfaces})'
    echo '            opts=${interfaces}'
    echo '            ;;'
    echo '    esac'
    echo '    COMPREPLY=( $(compgen -W "${opts}" -- $cur) )'
    echo '}'
    echo "complete -F _${PROGNAME} ${PROGNAME}"
}

iptables_flush(){
    #
    # delete all existing rules.
    #
    ${IPTABLES} -F
    ${IPTABLES} -t nat -F
    ${IPTABLES} -t mangle -F
    ${IPTABLES} -X
}

# Masquerade, $1: $eth1(default) or ${wlan_sta}
iptables_masq(){
    ${IPTABLES} -t nat -A POSTROUTING -o ${1:-${eth1}} -j MASQUERADE
    #${IPTABLES} -t nat -A POSTROUTING -o ${eth1} -j SNAT --to-source 172.20.16.39
}
# Allowance, $1: $eth1(default) or ${wlan_sta}
iptables_allow(){
    # Always accept loopback traffic
    ${IPTABLES} -A INPUT -i lo -j ACCEPT
    # Allow established connections, and those not coming from the outside
    ${IPTABLES} -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    ${IPTABLES} -A INPUT -m state --state NEW ! -i ${1:-${eth1}} -j ACCEPT
}
# Filter, $1(internet face): ${eth1}(default) or ${wlan_sta}
#         $2(local face): ${eth0} or ${wlan_ap}
iptables_filter(){
    ${IPTABLES} -A FORWARD -i ${1:-${eth1}} -o ${2:-${eth0}} -m state --state ESTABLISHED,RELATED -j ACCEPT
    # Allow outgoing connections from the LAN side.
    ${IPTABLES} -A FORWARD -i ${2:-${eth0}} -o ${1:-${eth1}} -j ACCEPT
    # Don't forward from the outside to the inside.
    ${IPTABLES} -A FORWARD -i ${1:-${eth1}} -o ${2:-${eth0}} -j REJECT
    if [ "${3}x" != "x" ]; then 
        ${IPTABLES} -A FORWARD -i ${1:-${eth1}} -o ${3} -m state --state ESTABLISHED,RELATED -j ACCEPT
        ${IPTABLES} -A FORWARD -i ${3} -o ${1:-${eth1}} -j ACCEPT
        ${IPTABLES} -A FORWARD -i ${1:-${eth1}} -o ${3} -j REJECT
    fi
}

# support mode: eth1 --
#               wlan_sta --
#
# saytax:   iptables_set
#           iptables_set ${eth1} ${eth0}
#           iptables_set ${eth1} ${wlan_ap}
#           iptables_set ${eth1} ${eth0} ${wlan_ap}
#           iptables_set ${wlan_sta} ${wlan_ap}
#           iptables_set ${wlan_sta} ${eth0}
#           iptables_set ${wlan_sta} ${wlan_ap} ${eth0}
iptables_set(){
    iptables_allow ${1:-${eth1}}
    iptables_filter ${1:-${eth1}} ${2:-${eth0}} ${3}
    iptables_masq ${1:-${eth1}}
}

iptables_nat_start(){
    # Enable routing.
    echo 1 >/proc/sys/net/ipv4/ip_forward
}
iptables_nat_stop(){
    echo 0 >/proc/sys/net/ipv4/ip_forward
}

iptables_status(){
    echo ipv6: `cat /proc/sys/net/ipv6/conf/all/forwarding` ipv4:`cat /proc/sys/net/ipv4/ip_forward`
    echo ""
    echo "Table NAT:"
    ${IPTABLES} -t nat -S
    echo ""
    echo "Table FILTER:"
    ${IPTABLES} -t filter -S
    echo ""
    echo "More refer to: iptables -t nat/filter -L -v"
}
iptables_reset(){
    # for potential ap 
    killall hostapd 2>/dev/null
    # flush ip for every interface
    for x in $(/sbin/ip a |grep -i "^[1-9]:*"|cut -d":" -f2 |sed -n "1d;p");
    do
        ip addr flush dev ${x};
    done
    service networking restart
}

ap_start(){
    #bring up local wlan interface and share ap
    ifup ${1:-${wlan0_ap}}
}
ap_stop(){
    #bring up local wlan interface and share ap
    ifdown ${1:-${wlan0_ap}}
    service networking restart
}
ap_create(){
    wlan0=${1:-${wlan0}}
    [ ! -d "/sys/class/net/${wlan0_ap}" ] && \
        iw dev ${wlan0} interface add ${wlan0}_ap type __ap addr 9c:b6:d0:04:12:00
    [ ! -d "/sys/class/net/${wlan0_sta}" ] && \
        iw dev ${wlan0} interface add ${wlan0}_sta type managed addr 9c:b6:d0:04:12:ff
}
ap_delete(){
    wlan0=${1:-${wlan0}}
    [ -d "/sys/class/net/${wlan0_ap}" ] && iw dev ${wlan0_ap} del
    [ -d "/sys/class/net/${wlan0_sta}" ] && iw dev ${wlan0_sta} del
}
check_interface(){
    while [ $# -gt 0 ]; do
        [ ! -d "/sys/class/net/$1" ] && \
            echo -e "Please check Inernet ethernet interface by\n   ls /sys/class/net\nModify the interface names in $0" && return 1
        shift
    done
}

[ $# -eq 0 ] && usage |less && exit 0
[ $(id -u) -ne 0 ] && echo "Pleas run as root: sudo nat ..." && exit 1
case "$1" in 
    nat)
        shift
        case "$1" in
            start)
                shift
                check_interface "$@" && iptables_set $1 $2 $3 && iptables_nat_start
                ;;
            stop)
                iptables_nat_stop && exit 0;;
            restart)
                shift
                iptables_stop && iptables_reset && check_interface "$@" && iptables_set $1 $2 $3 && iptables_nat_start
                ;;
            flush)
                # for safety, we should stop NAT before flush filters
                iptables_nat_stop && iptables_flush
                ;;
            masq)
                shift
                check_interface "$@" && iptables_set $1 $2 $3 && iptables_nat_start
                ;;
        esac
        ;;
    status)
        iptables_status  && exit 0
        ;;
    ap)
        shift
        case "$1" in 
            start) ap_start && exit 0;;
            stop) ap_stop && exit 0;;
            create) ap_create $2 && exit 0;;
            delete) ap_delete $2 && exit 0;;
        esac
        ;;
    reset)
        iptables_nat_stop && iptables_flush && iptables_reset
        ;;
    inet)
        shift 
        case "$1" in
            start) check_interface "$2" && ifup "$2";;
            stop) check_interface "$2" && ifdown "$2";;
        esac
        ;;
    *)
        usage |less && exit 1
esac
